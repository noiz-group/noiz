image: continuumio/miniconda3:latest

stages:
  - testing
  - linting
  - documentation
  - documentation-deployment
  - image-building

test-noiz:
  before_script:
    - conda create -c conda-forge -c heavelock -n noiz-test python=3.7 --file=requirements.txt --yes
    - source activate noiz-test
    - pip install sqlalchemy-stubs
  stage: testing
  script:
    - source activate noiz-test
    - pytest --cov=noiz

black-check:
  before_script:
    - conda install black
  stage: linting
  script:
    - black --verbose --check noiz

type-check:
  before_script:
    - conda create -c conda-forge -c heavelock -n noiz-test python=3.7 --file=requirements.txt --yes
    - source activate noiz-test
    - pip install sqlalchemy-stubs
  stage: linting
  script:
    - source activate noiz-test
    - mypy noiz

build-docs:
  stage: documentation
  script:
  - apt-get update && apt-get upgrade -yy && apt-get install build-essential -yy
  - pip install -r requirements-docs.txt
  - sphinx-apidoc -f -o docs noiz
  - cd docs
  - make html
  artifacts:
    paths:
    - docs/_build/html/

pages:
  stage: documentation-deployment
  image: alpine
  script:
  - mv docs/_build/html/ public/
  artifacts:
    paths:
    - public
  only:
  - master

test_build:
  stage: image-building
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_TAG: $CI_REGISTRY_IMAGE/test:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  except:
  - master

latest_build:
  stage: image-building
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
  - master