image: python:3.8

stages:
  - system-testing
  - testing
  - linting
  - documentation
  - documentation-deployment
  - image-building
  - downstream

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  UNITTESTING_IMAGE_TAG: $CI_REGISTRY_IMAGE:unittesting
  POSTGRES_IMAGE_TAG: $CI_REGISTRY_IMAGE:postgres
  LATEST_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  TEST_IMAGE_TAG: $CI_REGISTRY_IMAGE/test:$CI_COMMIT_REF_SLUG
  DIND_IMAGE: docker:19.03.12
  DIND_SERVICE: docker:19.03.12-dind

.install_noiz_complete: &install_noiz_complete
  - python -m pip install --upgrade pip setuptools wheel
  - python -m pip install --no-cache-dir -r requirements.txt
  - python -m pip install .

.login_dockerhub: &login_dockerhub
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

test-noiz:
  image: $UNITTESTING_IMAGE_TAG
  stage: testing
  before_script:
    - *install_noiz_complete
  script:
    - pytest --cov=noiz

type-check:
  image: $UNITTESTING_IMAGE_TAG
  stage: linting
  script:
    - mypy src/noiz

flake8:
  image: $UNITTESTING_IMAGE_TAG
  stage: linting
  script:
    - flake8 .

build-docs:
  image: $UNITTESTING_IMAGE_TAG
  stage: documentation
  before_script:
    - *install_noiz_complete
  script:
  - cd docs
  - make html
  artifacts:
    paths:
    - docs/_build/html/
#  only:
#    - master

pages:
  stage: documentation-deployment
  image: alpine
  script:
  - mv docs/_build/html/ public/
  artifacts:
    paths:
    - public
  only:
  - master

#test_build:
#  stage: image-building
#  image: $DIND_IMAGE
#  services:
#    - $DIND_SERVICE
#  before_script:
#    - *login_dockerhub
#  script:
#    - docker build -t $TEST_IMAGE_TAG .
#    - docker push $TEST_IMAGE_TAG
#  except:
#  - master

latest_build:
  stage: image-building
  image: $DIND_IMAGE
  services:
    - $DIND_SERVICE
  before_script:
    - *login_dockerhub
  script:
    - docker build -t $LATEST_IMAGE_TAG .
    - docker push $LATEST_IMAGE_TAG
  only:
  - master

build_unittesting:
 stage: image-building
 image: $DIND_IMAGE
 services:
   - $DIND_SERVICE
 before_script:
   - *login_dockerhub
 script:
   - docker build -f docker/unittest-image/Dockerfile -t $UNITTESTING_IMAGE_TAG .
   - docker push $UNITTESTING_IMAGE_TAG
 only:
 - master

build_postgres:
 stage: image-building
 image: $DIND_IMAGE
 services:
   - $DIND_SERVICE
 before_script:
   - *login_dockerhub
 script:
   - docker build -f docker/postgres-image/Dockerfile -t $POSTGRES_IMAGE_TAG .
   - docker push $POSTGRES_IMAGE_TAG
 only:
 - master

system_tests:
  stage: system-testing
  image: $LATEST_IMAGE_TAG
  services:
    - $POSTGRES_IMAGE_TAG
  variables:
    FLASK_APP: autoapp.py
    POSTGRES_HOST: postgres
    POSTGRES_PORT: "5432"
    POSTGRES_USER: noiztest
    POSTGRES_PASSWORD: noiztest
    POSTGRES_DB: noiztest
    PROCESSED_DATA_DIR: /processed-data-dir
  script:
    - mkdir $PROCESSED_DATA_DIR
    - python -c "from noiz.settings import *; print(f'POSTGRES_HOST {POSTGRES_HOST}\n')"
    - python -c "from noiz.settings import *; print(f'POSTGRES_PORT {POSTGRES_PORT}\n')"
    - python -c "from noiz.settings import *; print(f'POSTGRES_USER {POSTGRES_USER}\n')"
    - python -c "from noiz.settings import *; print(f'POSTGRES_PASSWORD {POSTGRES_PASSWORD}\n')"
    - python -c "from noiz.settings import *; print(f'POSTGRES_DB {POSTGRES_DB}\n')"
    - python -c "from noiz.settings import *; print(f'SQLALCHEMY_DATABASE_URI {SQLALCHEMY_DATABASE_URI}\n')"
    - noiz db init
    - noiz db migrate
    - noiz db upgrade

trigger_airflow_master:
  stage: downstream
  image: alpine
  script:
    - apk update && apk add curl
    - "curl -X POST -F token=$TOKEN_TRIGGER_MASTER_AIRFLOW -F ref=master https://gitlab.com/api/v4/projects/13151521/trigger/pipeline"
  only:
  - master
