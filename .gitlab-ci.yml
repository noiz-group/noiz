image: python:3.8

stages:
  - testing
  - linting
  - documentation
  - documentation-deployment
  - image-building
  - system-testing
  - downstream

cache: &global_cache
  key: dataset-cache
  paths:
    - tests/system_tests/dataset
  policy: pull-push

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  UNITTESTING_IMAGE_TAG: $CI_REGISTRY_IMAGE:unittesting
  POSTGRES_IMAGE_TAG: $CI_REGISTRY_IMAGE:postgres
  STABLE_IMAGE_TAG: $CI_REGISTRY_IMAGE:stable
  LATEST_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest
  DIND_IMAGE: docker:19.03.12
  DIND_SERVICE: docker:19.03.12-dind

.install_noiz_complete: &install_noiz_complete
  - python -m pip install --upgrade pip setuptools wheel
  - python -m pip install --no-cache-dir -r requirements.txt
  - python -m pip install .

.login_dockerhub: &login_dockerhub
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.start_ssh_agent: &start_ssh_agent
  - export DOCKER_BUILDKIT=1
  - 'which ssh-agent || ( apk update && apk add --no-cache openssh-client )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

test-noiz:
  image: $UNITTESTING_IMAGE_TAG
  stage: testing
  before_script:
    - *install_noiz_complete
  script:
    - pytest --cov=noiz

type-check:
  image: $UNITTESTING_IMAGE_TAG
  stage: linting
  script:
    - mypy src/noiz

flake8:
  image: $UNITTESTING_IMAGE_TAG
  stage: linting
  script:
    - flake8 .

build-docs:
  image: $UNITTESTING_IMAGE_TAG
  stage: documentation
  before_script:
    - *install_noiz_complete
  script:
  - cd docs
  - make html
  artifacts:
    paths:
    - docs/_build/html/
#  only:
#    - master

pages:
  stage: documentation-deployment
  image: alpine
  script:
  - mv docs/_build/html/ public/
  artifacts:
    paths:
    - public
  only:
  - master

.image_building_parent:
  stage: image-building
  image: $DIND_IMAGE
  services:
    - $DIND_SERVICE
  before_script:
    - *login_dockerhub
    - *start_ssh_agent
  after_script:
    - docker push $CI_REGISTRY_IMAGE

test_build:
  extends: .image_building_parent
  script:
    - docker build --ssh default --cache-from $LATEST_IMAGE_TAG -t $LATEST_IMAGE_TAG .
  only:
    refs:
      - branches
    changes:
      - Dockerfile

stable_build:
  extends: .image_building_parent
  script:
    - docker build --ssh default -t $LATEST_IMAGE_TAG -t $STABLE_IMAGE_TAG .
  only:
    - master

build_unittesting:
  extends: .image_building_parent
  script:
    - docker build -f docker/unittest-image/Dockerfile -t $UNITTESTING_IMAGE_TAG .
  only:
    - master

build_postgres:
  extends: .image_building_parent
  script:
    - docker build -f docker/postgres-image/Dockerfile -t $POSTGRES_IMAGE_TAG .
  only:
    - master

.system_test_parent:
  stage: system-testing
  image: $LATEST_IMAGE_TAG
  services:
    - name: $POSTGRES_IMAGE_TAG
      alias: postgres
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PORT: "5432"
    POSTGRES_USER: noiztest
    POSTGRES_PASSWORD: noiztest
    POSTGRES_DB: noiztest
    PROCESSED_DATA_DIR: /processed-data-dir
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - *install_noiz_complete
    - mkdir -p $PROCESSED_DATA_DIR
    - noiz db init
    - noiz db migrate
    - noiz db upgrade
    - $MSEEDINDEX_EXECUTABLE -v -pghost $POSTGRES_HOST -dbuser $POSTGRES_USER -dbpass $POSTGRES_PASSWORD -dbname $POSTGRES_DB tests/system_tests/dataset/seismic-data/SDS/2019/SI/SI*/*/*

api_system_tests:
  extends: .system_test_parent
  script:
    - pytest --cov=noiz --runapi

cli_system_tests:
  extends: .system_test_parent
  script:
    - pytest --cov=noiz --runapi

trigger_airflow_master:
  stage: downstream
  image: alpine
  script:
    - apk update && apk add curl
    - "curl -X POST -F token=$TOKEN_TRIGGER_MASTER_AIRFLOW -F ref=master https://gitlab.com/api/v4/projects/13151521/trigger/pipeline"
  only:
  - master
